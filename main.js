(()=>{"use strict";var e={m:{},u:e=>e+".js"};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),e.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var a=e.g.document;if(!t&&a&&(a.currentScript&&(t=a.currentScript.src),!t)){var r=a.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.b=document.baseURI||self.location.href;const t="this-is-a-message";document.addEventListener("DOMContentLoaded",(()=>{console.log("Script loaded");const a=document.querySelector("#results"),r=document.querySelector('input[type="file"]'),n=new Worker(new URL(e.p+e.u(317),e.b),{type:void 0});n.addEventListener("message",(e=>(({data:e},a)=>{const{type:r,timestamp:n,value:o}=e;if(function(e){if("object"!=typeof e||null===e||!("type"in e)||!("value"in e)||e.signature!==t)throw new TypeError(`data is not an ExampleMessage (got ${e})`);const a=e.type;switch(a){case"Layer":case"MainImageData":case"ParseData":return;default:(e=>{throw new TypeError(`Unexpected ExampleMessage type: ${e}`)})(a)}}(e),console.log("It took %d ms to send this message (worker â†’ main, type: %o)",Date.now()-n,r),"Layer"===r){const e=o;a.insertAdjacentHTML("beforeend",`<h3>${e.name}</h3>`),a.insertAdjacentHTML("beforeend",`<div><p class="layer-info">size : ${e.width} x ${e.height} | top: ${e.top} | left: ${e.left}</p></div>`),console.time("Create and append <canvas> for layer"),a.appendChild((e=>{const t=document.createElement("canvas"),a=t.getContext("2d"),{width:r,height:n,pixelData:o}=e,s=a.createImageData(r,n);return t.width=r,t.height=n,s.data.set(o),a.putImageData(s,0,0),t})(e)),console.timeEnd("Create and append <canvas> for layer")}})(e,a))),r.addEventListener("change",(()=>{const e=r.files[0];e&&((e=>{if(e.arrayBuffer)return e.arrayBuffer();{const t=new FileReader;return t.readAsArrayBuffer(e),new Promise((e=>{t.addEventListener("load",(t=>{if(!t.target)throw new Error("Loaded file but event.target is null");e(t.target.result)}))}))}})(e).then((e=>{n.postMessage({type:"ParseData",value:e,signature:t,timestamp:Date.now()},[e])})),r.value="",a.innerHTML="")}))}))})();